{"version":3,"sources":["firebase/config.js","Hooks/useFirestore.js","comps/imageGrid.js","comps/Title.js","Hooks/useStorage.js","comps/progressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","console","log","className","map","key","onClick","url","src","alt","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","action","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7656358.chunk.js","sourcesContent":["import  firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore'; \r\n \r\n // Your web app's Firebase configuration\r\n var firebaseConfig = {\r\n    apiKey: \"AIzaSyAd9dOgEQ_f7U0HeSIhDePlirXDLtXWrV8\",\r\n    authDomain: \"firegram-e63ba.firebaseapp.com\",\r\n    projectId: \"firegram-e63ba\",\r\n    storageBucket: \"firegram-e63ba.appspot.com\",\r\n    messagingSenderId: \"632208108277\",\r\n    appId: \"1:632208108277:web:fed3c494773bd636c7b3bc\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  const projectStorage = firebase.storage();\r\n  const projectFirestore = firebase.firestore();\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\n\r\n  export { projectStorage, projectFirestore, timestamp};","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy('createdAt', 'desc')\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({...doc.data(), id: doc.id})\r\n                });\r\n                setDocs(documents);\r\n            });\r\n        \r\n        return () => unsub();\r\n\r\n    }, [collection])\r\n\r\n    return { docs };\r\n}\r\n\r\nexport default useFirestore;","import React from 'react';\r\nimport useFirestore from '../Hooks/useFirestore';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFirestore('images');\r\n    console.log(docs);\r\n\r\n    return(\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map(doc => (\r\n                <div className=\"img-wrap\" key={doc.id}\r\n                 onClick={() => setSelectedImg(doc.url)}\r\n                >\r\n                    <img src={ doc.url } alt=\"Uploaded pic\" />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default ImageGrid;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>ZaidGram</h1>\n      <h2>Let's Share Memories</h2>\n      <p>Click below to upload your picture</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //References\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n        \r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage); \r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt })\r\n            setUrl(url)\r\n        })\r\n    }, [file])\r\n\r\n    return {progress, url, error}\r\n}\r\nexport default useStorage;","import React, { useEffect } from 'react';\r\nimport useStorage from '../Hooks/useStorage';\r\n\r\nconst ProgressBar = ({file, setFile}) => {\r\n    const {url, progress} = useStorage(file);\r\n    \r\n    useEffect(() => {\r\n        if(url){\r\n            setFile(null)\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return(\r\n        <div className=\"progress-bar\" style={ { width: progress + '%' }}></div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useDebugValue, useState } from 'react';\r\nimport ProgressBar from './progressBar';\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n\r\n        const types = ['image/png', '/image/jpeg'];\r\n        \r\n        if(selected && types.includes(selected.type)){\r\n            setFile(selected);\r\n            setError('')\r\n        }else{\r\n            setFile(null);\r\n            setError(\"Please select an image file (png or jpeg)\")\r\n        }\r\n    }\r\n\r\n    return(\r\n        <form action=\"\">\r\n            <input type=\"file\" onChange= {changeHandler} />\r\n            <div className=\"output\">\r\n                { error &&  <div className=\"error\">{ error }</div> }\r\n                { file && <div>{file.name}</div> }\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm","import React from 'react';\r\n\r\nconst Modal = ( {selectedImg, setSelectedImg} ) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImg(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"backdrop\" onClick={ handleClick }>\r\n            <img src={ selectedImg } alt=\"enlarged pic\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { useState } from 'react';\nimport ImageGrid from './comps/imageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport Modal from './comps/Modal';\n\n\nfunction App() {\n  const [ selectedImg, setSelectedImg ] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm/>\n      <ImageGrid setSelectedImg={ setSelectedImg }/>\n      {selectedImg && <Modal selectedImg = { selectedImg } setSelectedImg={ setSelectedImg }/>} \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}